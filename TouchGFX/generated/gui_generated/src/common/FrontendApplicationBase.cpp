/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/screen_locked_screen/screen_lockedView.hpp>
#include <gui/screen_locked_screen/screen_lockedPresenter.hpp>
#include <gui/screen_authorized_screen/screen_authorizedView.hpp>
#include <gui/screen_authorized_screen/screen_authorizedPresenter.hpp>
#include <gui/screen_game_select_screen/screen_game_selectView.hpp>
#include <gui/screen_game_select_screen/screen_game_selectPresenter.hpp>
#include <gui/screen_scoreboard_screen/screen_scoreboardView.hpp>
#include <gui/screen_scoreboard_screen/screen_scoreboardPresenter.hpp>
#include <gui/screen_asteroids_screen/screen_asteroidsView.hpp>
#include <gui/screen_asteroids_screen/screen_asteroidsPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
}

/*
 * Screen Transition Declarations
 */

// screen_locked

void FrontendApplicationBase::gotoscreen_lockedScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_lockedScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_lockedScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_lockedView, screen_lockedPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_authorized

void FrontendApplicationBase::gotoscreen_authorizedScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_authorizedScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_authorizedScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<screen_authorizedView, screen_authorizedPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_game_select

void FrontendApplicationBase::gotoscreen_game_selectScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_game_selectScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_game_selectScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<screen_game_selectView, screen_game_selectPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoscreen_game_selectScreenSlideTransitionWest()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_game_selectScreenSlideTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_game_selectScreenSlideTransitionWestImpl()
{
    touchgfx::makeTransition<screen_game_selectView, screen_game_selectPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_scoreboard

void FrontendApplicationBase::gotoscreen_scoreboardScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_scoreboardScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_scoreboardScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<screen_scoreboardView, screen_scoreboardPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_asteroids

void FrontendApplicationBase::gotoscreen_asteroidsScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_asteroidsScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_asteroidsScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<screen_asteroidsView, screen_asteroidsPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
