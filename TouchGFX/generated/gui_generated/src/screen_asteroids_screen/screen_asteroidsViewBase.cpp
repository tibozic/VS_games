/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_asteroids_screen/screen_asteroidsViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

screen_asteroidsViewBase::screen_asteroidsViewBase() :
    flexButtonCallback(this, &screen_asteroidsViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &screen_asteroidsViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    bg_grey.setPosition(0, 0, 480, 272);
    bg_grey.setColor(touchgfx::Color::getColorFromRGB(51, 51, 51));
    add(bg_grey);

    btn_back.setPosition(0, 0, 50, 50);
    _btn_back.setBoxWithBorderPosition(0, 0, 50, 50);
    _btn_back.setBorderSize(5);
    _btn_back.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    _btn_back.setAction(flexButtonCallback);
    _btn_back.setPosition(0, 0, 50, 50);
    btn_back.add(_btn_back);

    bg_black.setPosition(0, 0, 50, 50);
    bg_black.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    btn_back.add(bg_black);

    lbl_back.setXY(13, 15);
    lbl_back.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    lbl_back.setLinespacing(0);
    lbl_back.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UBH9));
    btn_back.add(lbl_back);

    add(btn_back);

    icon_rock.setBitmap(touchgfx::Bitmap(BITMAP_ASTEROIDS_ROCK_ID));
    icon_rock.setPosition(285, 79, 34, 29);
    icon_rock.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    icon_rock.setVisible(false);
    add(icon_rock);

    icon_ship.setPosition(225, 227, 30, 30);
    icon_ship.setOrigin(0.0f, 0.0f);
    icon_ship.setScale(1.0f, 1.0f);
    icon_ship.setAngle(0.0f);
    icon_shipPainter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    icon_ship.setPainter(icon_shipPainter);
    const touchgfx::AbstractShape::ShapePoint<float> icon_shipPoints[3] = { { 15.0f, 0.0f }, { 30.0f, 30.0f }, { 0.0f, 30.0f } };
    icon_ship.setShape(icon_shipPoints);
    add(icon_ship);

    lbl_score.setXY(338, 3);
    lbl_score.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    lbl_score.setLinespacing(0);
    Unicode::snprintf(lbl_scoreBuffer, LBL_SCORE_SIZE, "%s", touchgfx::TypedText(T_SCORE_VALUE).getText());
    lbl_score.setWildcard(lbl_scoreBuffer);
    lbl_score.resizeToCurrentText();
    lbl_score.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W1MR));
    add(lbl_score);

    container_health.setPosition(233, 4, 92, 20);
    icon_heart1.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ICON_ID));
    icon_heart1.setPosition(72, 1, 20, 20);
    icon_heart1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container_health.add(icon_heart1);

    icon_heart2.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ICON_ID));
    icon_heart2.setPosition(49, 1, 20, 20);
    icon_heart2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container_health.add(icon_heart2);

    icon_heart3.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ICON_ID));
    icon_heart3.setPosition(26, 1, 20, 20);
    icon_heart3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    container_health.add(icon_heart3);

    add(container_health);

    container_controls.setPosition(368, 155, 108, 108);
    btn_right.setXY(72, 36);
    btn_right.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    btn_right.setIconXY(-7, -7);
    btn_right.setAction(buttonCallback);
    container_controls.add(btn_right);

    btn_down.setXY(36, 72);
    btn_down.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    btn_down.setIconXY(-6, -6);
    btn_down.setAction(buttonCallback);
    container_controls.add(btn_down);

    btn_left.setXY(0, 36);
    btn_left.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    btn_left.setIconXY(-7, -7);
    btn_left.setAction(buttonCallback);
    container_controls.add(btn_left);

    btn_up.setXY(36, 0);
    btn_up.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    btn_up.setIconXY(-6, -6);
    btn_up.setAction(buttonCallback);
    container_controls.add(btn_up);

    add(container_controls);

    btn_shoot.setXY(25, 191);
    btn_shoot.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_MAPS_LOCAL_FIRE_DEPARTMENT_30_30_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_30_30_E8F6FB_SVG_ID));
    btn_shoot.setIconXY(2, 2);
    btn_shoot.setAction(buttonCallback);
    add(btn_shoot);

    bullet.setPosition(238, 219, 4, 4);
    bullet.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    bullet.setVisible(false);
    add(bullet);
}

screen_asteroidsViewBase::~screen_asteroidsViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void screen_asteroidsViewBase::setupScreen()
{

}

void screen_asteroidsViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &_btn_back)
    {
        //suspend_asteroid_task
        //When _btn_back clicked call virtual function
        //Call suspend_asteroids_task
        suspend_asteroids_task();
    
        //interaction_transition_to_home
        //When suspend_asteroid_task completed change screen to screen_game_select
        //Go to screen_game_select with screen transition towards West
        application().gotoscreen_game_selectScreenSlideTransitionWest();
    }
}

void screen_asteroidsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn_shoot)
    {
        //interaction_btn_shoot
        //When btn_shoot clicked call virtual function
        //Call btn_shoot_pressed
        btn_shoot_pressed();
    }
    if (&src == &btn_up)
    {
        //interaction_btn_up
        //When btn_up clicked call virtual function
        //Call btn_up_pressed
        btn_up_pressed();
    }
    if (&src == &btn_down)
    {
        //interaction_btn_down
        //When btn_down clicked call virtual function
        //Call btn_down_pressed
        btn_down_pressed();
    }
    if (&src == &btn_right)
    {
        //interaction_btn_right
        //When btn_right clicked call virtual function
        //Call btn_right_pressed
        btn_right_pressed();
    }
    if (&src == &btn_left)
    {
        //interaction_btn_left
        //When btn_left clicked call virtual function
        //Call btn_left_pressed
        btn_left_pressed();
    }
}

void screen_asteroidsViewBase::afterTransition()
{
    //interaction_resume_asteroids_task
    //When screen transition ends call virtual function
    //Call resume_asteroids_task
    resume_asteroids_task();

    //interaction_start_asteroids_game
    //When screen transition ends call virtual function
    //Call start_asteroids_game
    start_asteroids_game();
}
