/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN_AUTHORIZEDVIEWBASE_HPP
#define SCREEN_AUTHORIZEDVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen_authorized_screen/screen_authorizedPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class screen_authorizedViewBase : public touchgfx::View<screen_authorizedPresenter>
{
public:
    screen_authorizedViewBase();
    virtual ~screen_authorizedViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  btn_next;
    touchgfx::Box bg_blue;
    touchgfx::Container container_user_data;
    touchgfx::Box bg_white;
    touchgfx::ScalableImage icon_person;
    touchgfx::TextAreaWithOneWildcard lbl_name;
    touchgfx::TextAreaWithOneWildcard lbl_high_score;
    touchgfx::TextAreaWithOneWildcard lbl_tag;

    /*
     * Wildcard Buffers
     */
    static const uint16_t LBL_NAME_SIZE = 20;
    touchgfx::Unicode::UnicodeChar lbl_nameBuffer[LBL_NAME_SIZE];
    static const uint16_t LBL_HIGH_SCORE_SIZE = 6;
    touchgfx::Unicode::UnicodeChar lbl_high_scoreBuffer[LBL_HIGH_SCORE_SIZE];
    static const uint16_t LBL_TAG_SIZE = 6;
    touchgfx::Unicode::UnicodeChar lbl_tagBuffer[LBL_TAG_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<screen_authorizedViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SCREEN_AUTHORIZEDVIEWBASE_HPP
